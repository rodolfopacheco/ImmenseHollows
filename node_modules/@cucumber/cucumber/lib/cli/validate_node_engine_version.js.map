{"version":3,"file":"validate_node_engine_version.js","sourceRoot":"","sources":["../../src/cli/validate_node_engine_version.ts"],"names":[],"mappings":";;;;;;AAAA,4CAAmB;AACnB,gDAAuB;AACvB,oDAA2B;AAM3B,MAAM,qBAAqB,GAAsB,GAAG,EAAE,CACpD,IAAI,CAAC,KAAK,CACR,YAAE;KACC,YAAY,CAAC,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;KACjE,QAAQ,EAAE,CACd,CAAA;AAEH,SAAgB,yBAAyB,CACvC,cAAsB,EACtB,OAAkC,EAClC,kBAAqC,qBAAqB;IAE1D,MAAM,eAAe,GAAG,eAAe,EAAE,CAAC,OAAO,CAAC,IAAI,CAAA;IACtD,IAAI,CAAC,gBAAM,CAAC,SAAS,CAAC,cAAc,EAAE,eAAe,CAAC,EAAE;QACtD,OAAO,CACL,6CAA6C,eAAe,6BAA6B,cAAc,EAAE,CAC1G,CAAA;KACF;AACH,CAAC;AAXD,8DAWC","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport semver from 'semver'\n\ntype PackageJSON = {\n  engines: { node: string }\n}\n\nconst readActualPackageJSON: () => PackageJSON = () =>\n  JSON.parse(\n    fs\n      .readFileSync(path.resolve(__dirname, '..', '..', 'package.json'))\n      .toString()\n  )\n\nexport function validateNodeEngineVersion(\n  currentVersion: string,\n  onError: (message: string) => void,\n  readPackageJSON: () => PackageJSON = readActualPackageJSON\n): void {\n  const requiredVersion = readPackageJSON().engines.node\n  if (!semver.satisfies(currentVersion, requiredVersion)) {\n    onError(\n      `Cucumber can only run on Node.js versions ${requiredVersion}. This Node.js version is ${currentVersion}`\n    )\n  }\n}\n"]}