"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertConfiguration = void 0;
const configuration_1 = require("../configuration");
async function convertConfiguration(flatConfiguration, env) {
    var _a;
    return {
        sources: {
            paths: flatConfiguration.paths,
            defaultDialect: flatConfiguration.language,
            names: flatConfiguration.name,
            tagExpression: flatConfiguration.tags,
            order: flatConfiguration.order,
        },
        support: {
            requireModules: flatConfiguration.requireModule,
            requirePaths: flatConfiguration.require,
            importPaths: flatConfiguration.import,
        },
        runtime: {
            dryRun: flatConfiguration.dryRun,
            failFast: flatConfiguration.failFast,
            filterStacktraces: !flatConfiguration.backtrace,
            parallel: flatConfiguration.parallel,
            retry: flatConfiguration.retry,
            retryTagFilter: flatConfiguration.retryTagFilter,
            strict: flatConfiguration.strict,
            worldParameters: flatConfiguration.worldParameters,
        },
        formats: {
            stdout: (_a = [...flatConfiguration.format]
                .reverse()
                .find((option) => !option.includes(':'))) !== null && _a !== void 0 ? _a : 'progress',
            files: flatConfiguration.format
                .filter((option) => option.includes(':'))
                .reduce((mapped, item) => {
                const [type, target] = configuration_1.OptionSplitter.split(item);
                return {
                    ...mapped,
                    [target]: type,
                };
            }, {}),
            publish: makePublishConfig(flatConfiguration, env),
            options: flatConfiguration.formatOptions,
        },
    };
}
exports.convertConfiguration = convertConfiguration;
function isPublishing(flatConfiguration, env) {
    return (flatConfiguration.publish ||
        (0, configuration_1.isTruthyString)(env.CUCUMBER_PUBLISH_ENABLED) ||
        env.CUCUMBER_PUBLISH_TOKEN !== undefined);
}
function makePublishConfig(flatConfiguration, env) {
    const enabled = isPublishing(flatConfiguration, env);
    if (!enabled) {
        return false;
    }
    return {
        url: env.CUCUMBER_PUBLISH_URL,
        token: env.CUCUMBER_PUBLISH_TOKEN,
    };
}
//# sourceMappingURL=convert_configuration.js.map